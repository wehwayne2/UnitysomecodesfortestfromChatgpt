void loop() {
  static unsigned long lastTime = 0;
  static unsigned long lastQuaternionTime = 0;
  unsigned long currentTime = millis();

  uduino.update();
  if (uduino.isConnected()) {
    // lightsensor
    int lightValue = analogRead(lightSensorPin);
    float remappedLightValue = map(lightValue, 20, 450, 0, 100);

    // Ultrasonic Ranger
    long RangeInCentimeters = ultrasonic.MeasureInCentimeters(); // two measurements should keep an interval

    // Check if MPU is initialized
    if (uduino.isInit()) {
      if (!dmpReady) {
        Serial.println("IMU not connected.");
        delay(100);
        return;
      }

      int mpuIntStatus = mpu.getIntStatus();
      fifoCount = mpu.getFIFOCount();

      if ((mpuIntStatus & 0x10) || fifoCount == 1024) { // check if overflow
        mpu.resetFIFO();
      } else if (mpuIntStatus & 0x02) {
        while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

        mpu.getFIFOBytes(fifoBuffer, packetSize);
        fifoCount -= packetSize;

        // Combine outputs into one line
        uduino.print(RangeInCentimeters); // 0~400cm
        uduino.print("|");
        uduino.print(remappedLightValue);
        uduino.print("|");

        // Check if it's time to send the quaternion
        if (currentTime - lastQuaternionTime >= 10) {
          SendQuaternion(); // This function should handle its own printing
          lastQuaternionTime = currentTime;
        }
      }
    } else {
      // Print values even if MPU is not initialized
      uduino.print(RangeInCentimeters); // 0~400cm
      uduino.print("|");
      uduino.print(remappedLightValue);
      uduino.print("|");
    }
  }

  // Wait for the appropriate amount of time before the next loop iteration
  if (currentTime - lastTime >= 100) {
    lastTime = currentTime;
  }
}
