unsigned long lastLightAndRangeUpdate = 0;
unsigned long lastQuaternionUpdate = 0;
const unsigned long lightAndRangeInterval = 100;
const unsigned long quaternionInterval = 10;

void loop() {
  uduino.update();
  
  if (uduino.isConnected()) {
    unsigned long currentMillis = millis();

    // Check if it's time to update light and range values
    if (currentMillis - lastLightAndRangeUpdate >= lightAndRangeInterval) {
      lastLightAndRangeUpdate = currentMillis;

      // Light Sensor
      int lightValue = analogRead(lightSensorPin);
      float remappedLightValue = map(lightValue, 20, 450, 0, 100);

      // Ultrasonic Ranger
      long RangeInCentimeters = ultrasonic.MeasureInCentimeters(); // two measurements should keep an interval

      // Print values
      uduino.print(RangeInCentimeters); // 0~400cm
      uduino.print("|");
      uduino.print(remappedLightValue);
      uduino.print("|");
    }

    // Check if it's time to update quaternion values
    if (currentMillis - lastQuaternionUpdate >= quaternionInterval) {
      lastQuaternionUpdate = currentMillis;

      // Check if MPU is initialized
      if (uduino.isInit()) {
        if (!dmpReady) {
          Serial.println("IMU not connected.");
          return;
        }

        int mpuIntStatus = mpu.getIntStatus();
        fifoCount = mpu.getFIFOCount();

        if ((mpuIntStatus & 0x10) || fifoCount == 1024) { // check if overflow
          mpu.resetFIFO();
        } else if (mpuIntStatus & 0x02) {
          while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

          mpu.getFIFOBytes(fifoBuffer, packetSize);
          fifoCount -= packetSize;

          // Send quaternion data
          SendQuaternion(); // This function should handle its own printing
        }
      }
    }
  }
}
